import React, {useState} from 'react';
import {Link, useLocation} from 'react-router-dom';
import './Sidebar.css';

// Icons - s·ª≠ d·ª•ng emoji ho·∫∑c text thay th·∫ø lucide-react
const iconMap = {
    home: 'üè†',
    users: 'üë•',
    shield: 'üõ°Ô∏è',
    stethoscope: 'ü©∫',
    archive: 'üì¶',
    syringe: 'üíâ',
    activity: '‚ö°',
    settings: '‚öôÔ∏è',
    briefcase: 'üíº',
    clipboard: 'üìã',
    bookUser: 'üìö',
    bell: 'üîî',
    chevronLeft: '‚Äπ',
    chevronRight: '‚Ä∫',
    barChart: 'üìä',
    heart: '‚ù§Ô∏è',
    pill: 'üíä',
    calendar: 'üìÖ',
    report: 'üìÑ'
};

const navItems = [
    // Common
    {path: '/thongke', name: 'B·∫£ng ƒëi·ªÅu khi·ªÉn', icon: 'home', roles: ['ROLE_ADMIN', 'ROLE_NURSE', 'ROLE_PARENT']},
    {
        path: '/thongbaotiemchung',
        name: 'Th√¥ng b√°o',
        icon: 'bell',
        roles: ['ROLE_ADMIN', 'ROLE_NURSE', 'ROLE_PARENT'],
        badge: '3'
    },

    // Admin
    {path: '/admin/danhsachnguoidung', name: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng', icon: 'users', roles: ['ROLE_ADMIN']},
    {path: '/admin/taomoinguoidung', name: 'T·∫°o ng∆∞·ªùi d√πng', icon: 'users', roles: ['ROLE_ADMIN']},
    {path: '/danhsachhocsinh', name: 'Qu·∫£n l√Ω h·ªçc sinh', icon: 'bookUser', roles: ['ROLE_ADMIN']},
    {path: '/taomoihocsinh', name: 'T·∫°o h·ªçc sinh', icon: 'bookUser', roles: ['ROLE_ADMIN']},
    {path: '/taosukientiemchung', name: 'T·∫°o chi·∫øn d·ªãch ti√™m ch·ªßng', icon: 'syringe', roles: ['ROLE_ADMIN']},
    {path: '/quanlytiemchung', name: 'Qu·∫£n l√Ω ti√™m ch·ªßng', icon: 'syringe', roles: ['ROLE_ADMIN']},
    {path: '/admin', name: 'Qu·∫£n tr·ªã h·ªá th·ªëng', icon: 'settings', roles: ['ROLE_ADMIN']},

    // Y t√° (Nurse)
    {path: '/donthuoc', name: 'ƒê∆°n thu·ªëc', icon: 'clipboard', roles: ['ROLE_NURSE'], badge: '2'},
    {path: '/sukienyte', name: 'S·ª± c·ªë y t·∫ø', icon: 'activity', roles: ['ROLE_NURSE'], badge: '1'},
    {path: '/quanlythuoc', name: 'Qu·∫£n l√Ω thu·ªëc', icon: 'pill', roles: ['ROLE_NURSE']},
    {path: '/kiemtradinhky', name: 'T·∫°o ki·ªÉm tra ƒë·ªãnh k·ª≥', icon: 'stethoscope', roles: ['ROLE_NURSE']},
    {path: '/danhsachkiemtradinhky', name: 'Danh s√°ch ki·ªÉm tra', icon: 'stethoscope', roles: ['ROLE_NURSE']},
    {path: '/kiemtradinhkyhocsinh', name: 'Kh√°m s·ª©c kh·ªèe', icon: 'stethoscope', roles: ['ROLE_NURSE']},
    {path: '/nurse', name: 'Trang Y t√°', icon: 'stethoscope', roles: ['ROLE_NURSE']},

    // Ph·ª• huynh (Parent)
    {path: '/hososuckhoe', name: 'H·ªì s∆° s·ª©c kh·ªèe', icon: 'heart', roles: ['ROLE_PARENT']},
    {path: '/khaibaothuoc', name: 'Khai b√°o thu·ªëc', icon: 'briefcase', roles: ['ROLE_PARENT']},
    {path: '/parent', name: 'Trang Ph·ª• huynh', icon: 'heart', roles: ['ROLE_PARENT']},
];

const Sidebar = ({userRole, isCollapsed = false, onToggleCollapse}) => {
    const location = useLocation();
    const [hoveredItem, setHoveredItem] = useState(null);

    const filteredNavItems = navItems.filter(item => item.roles.includes(userRole));

    const getRoleTitle = (role) => {
        switch (role) {
            case 'ROLE_ADMIN':
                return 'Qu·∫£n tr·ªã vi√™n';
            case 'ROLE_NURSE':
                return 'Y t√°';
            case 'ROLE_PARENT':
                return 'Ph·ª• huynh';
            default:
                return 'Ng∆∞·ªùi d√πng';
        }
    };

    const getRoleIcon = (role) => {
        switch (role) {
            case 'ROLE_ADMIN':
                return 'üë®‚Äçüíº';
            case 'ROLE_NURSE':
                return 'üë©‚Äç‚öïÔ∏è';
            case 'ROLE_PARENT':
                return 'üë™';
            default:
                return 'üë§';
        }
    };

    return (
        <aside className={`sidebar ${isCollapsed ? 'collapsed' : ''}`}>
            {/* Toggle Button */}
            {onToggleCollapse && (
                <button
                    onClick={onToggleCollapse}
                    className="sidebar-toggle"
                >
                    {isCollapsed ? iconMap.chevronRight : iconMap.chevronLeft}
                </button>
            )}

            {/* Header */}
            <div className="sidebar-header">
                <div className="sidebar-header-content">
                    <div className="sidebar-logo">
                        <span className="sidebar-role-icon">{getRoleIcon(userRole)}</span>
                    </div>
                    {!isCollapsed && (
                        <div className="sidebar-title">
                            <h2 className="sidebar-school-name">Tr∆∞·ªùng FPT</h2>
                            <p className="sidebar-role-title">{getRoleTitle(userRole)}</p>
                        </div>
                    )}
                </div>
            </div>

            {/* Navigation */}
            <nav className="sidebar-nav">
                <ul className="sidebar-nav-list">
                    {filteredNavItems.map((item) => {
                        const isActive = location.pathname === item.path ||
                            (item.path !== '/thongke' && location.pathname.startsWith(item.path));

                        return (
                            <li key={item.path} className="sidebar-nav-item">
                                <Link
                                    to={item.path}
                                    onMouseEnter={() => setHoveredItem(item.path)}
                                    onMouseLeave={() => setHoveredItem(null)}
                                    className={`sidebar-nav-link ${isActive ? 'active' : ''}`}
                                >
                                    <div className="sidebar-nav-content">
                                        <div className={`sidebar-nav-icon ${isActive ? 'active' : ''}`}>
                                            {iconMap[item.icon] || 'üìÑ'}
                                        </div>
                                        {!isCollapsed && (
                                            <span className="sidebar-nav-text">{item.name}</span>
                                        )}
                                    </div>

                                    {/* Badge */}
                                    {item.badge && (
                                        <span className={`sidebar-badge ${isCollapsed ? 'absolute' : ''}`}>
                      {item.badge}
                    </span>
                                    )}

                                    {/* Tooltip for collapsed state */}
                                    {isCollapsed && hoveredItem === item.path && (
                                        <div className="sidebar-tooltip">
                                            {item.name}
                                            <div className="sidebar-tooltip-arrow"></div>
                                        </div>
                                    )}

                                    {/* Active indicator */}
                                    {isActive && (<div className="sidebar-active-indicator"></div>
                                    )}
                                </Link>
                            </li>
                        );
                    })}
                </ul>
            </nav>

            {/* Footer */}
            <div className="sidebar-footer">
                {!isCollapsed ? (
                    <div className="sidebar-footer-expanded">
                        <div className="sidebar-footer-header">
                            <div className="sidebar-footer-icon">
                                <span>üè•</span>
                            </div>
                            <span className="sidebar-footer-text">Y t·∫ø tr∆∞·ªùng h·ªçc</span>
                        </div>
                        <p className="sidebar-footer-copyright">¬© {new Date().getFullYear()} Tr∆∞·ªùng FPT</p>
                        <p className="sidebar-footer-system">H·ªá th·ªëng qu·∫£n l√Ω y t·∫ø</p>
                    </div>
                ) : (
                    <div className="sidebar-footer-collapsed">
                        <div className="sidebar-footer-icon-small">
                            <span>üè•</span>
                        </div>
                    </div>
                )}
            </div>
        </aside>
    );
};

export default Sidebar;