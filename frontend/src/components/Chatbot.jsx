import React, { useState, useRef, useEffect } from 'react';
import { DotLottieReact } from '@lottiefiles/dotlottie-react';
import './Chatbot.css';

const Chatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [position, setPosition] = useState({ x: 20, y: 20 }); // Default left position
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const chatbotRef = useRef(null);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Tr∆∞·ªùng Ti·ªÉu H·ªçc FPT. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:",
      sender: 'bot',
      timestamp: new Date()
    },
    {
      id: 2,
      text: "‚Ä¢ Th√¥ng tin v·ªÅ c√°c d·ªãch v·ª• y t·∫ø\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng\n‚Ä¢ C√¢u h·ªèi v·ªÅ ti√™m ch·ªßng\n‚Ä¢ Th√¥ng tin li√™n h·ªá",
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const messagesEndRef = useRef(null);

  const quickResponses = [
    "Th√¥ng tin ti√™m ch·ªßng",
    "C√°ch ƒëƒÉng k√Ω kh√°m s·ª©c kh·ªèe",
    "Li√™n h·ªá y t√°",
    "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"
  ];

  const botResponses = {
    "th√¥ng tin ti√™m ch·ªßng": "Ch∆∞∆°ng tr√¨nh ti√™m ch·ªßng c·ªßa tr∆∞·ªùng ƒë∆∞·ª£c th·ª±c hi·ªán theo l·ªãch c·ªßa B·ªô Y t·∫ø. Ph·ª• huynh s·∫Ω nh·∫≠n th√¥ng b√°o qua h·ªá th·ªëng khi c√≥ l·ªãch ti√™m ch·ªßng cho con em m√¨nh.",
    "c√°ch ƒëƒÉng k√Ω kh√°m s·ª©c kh·ªèe": "B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ th√¥ng qua h·ªá th·ªëng ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ph√≤ng y t·∫ø c·ªßa tr∆∞·ªùng. Kh√°m s·ª©c kh·ªèe ƒë∆∞·ª£c th·ª±c hi·ªán 2 l·∫ßn/nƒÉm h·ªçc.",
    "li√™n h·ªá y t√°": "Ph√≤ng y t·∫ø tr∆∞·ªùng: Ph√≤ng 101, T√≤a nh√† ch√≠nh\nSƒêT: 024-1234-5678\nEmail: yte@fptschool.edu.vn\nGi·ªù l√†m vi·ªác: 7:30 - 17:00 (Th·ª© 2 - Th·ª© 6)",
    "h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng": "H·ªá th·ªëng qu·∫£n l√Ω y t·∫ø c√≥ c√°c ch·ª©c nƒÉng ch√≠nh:\n‚Ä¢ Xem h·ªì s∆° s·ª©c kh·ªèe\n‚Ä¢ ƒêƒÉng k√Ω kh√°m b·ªánh\n‚Ä¢ Theo d√µi l·ªãch ti√™m ch·ªßng\n‚Ä¢ Nh·∫≠n th√¥ng b√°o y t·∫ø\n\nVui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng."
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const toggleChat = () => {
    setIsOpen(!isOpen);
  };

  const handleSendMessage = (messageText = inputMessage) => {
    if (!messageText.trim()) return;

    const newMessage = {
      id: messages.length + 1,
      text: messageText,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, newMessage]);
    setInputMessage('');

    // Generate bot response
    setTimeout(() => {
      const botResponse = generateBotResponse(messageText);
      const botMessage = {
        id: messages.length + 2,
        text: botResponse,
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botMessage]);
    }, 1000);
  };

  const generateBotResponse = (userMessage) => {
    const message = userMessage.toLowerCase();
    
    for (const [key, response] of Object.entries(botResponses)) {
      if (message.includes(key.toLowerCase())) {
        return response;
      }
    }

    // Default responses
    if (message.includes('xin ch√†o') || message.includes('hello') || message.includes('hi')) {
      return "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?";
    }
    
    if (message.includes('c·∫£m ∆°n') || message.includes('thank')) {
      return "R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! N·∫øu c√≥ th√™m c√¢u h·ªèi n√†o kh√°c, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi nh√©.";
    }

    if (message.includes('t·∫°m bi·ªát') || message.includes('bye')) {
      return "T·∫°m bi·ªát! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh. H·∫πn g·∫∑p l·∫°i!";
    }

    return "T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ \"" + userMessage + "\". Hi·ªán t·∫°i t√¥i ch∆∞a c√≥ th√¥ng tin chi ti·∫øt v·ªÅ v·∫•n ƒë·ªÅ n√†y. B·∫°n c√≥ th·ªÉ:\n\n‚Ä¢ Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ph√≤ng y t·∫ø: 024-1234-5678\n‚Ä¢ G·ª≠i email: yte@fptschool.edu.vn\n‚Ä¢ Ho·∫∑c th·ª≠ h·ªèi v·ªÅ c√°c ch·ªß ƒë·ªÅ kh√°c m√† t√¥i c√≥ th·ªÉ h·ªó tr·ª£.";
  };

  const handleQuickResponse = (response) => {
    handleSendMessage(response);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Drag functionality
  const handleMouseDown = (e) => {
    if (isOpen) return; // Don't drag when chat is open
    e.preventDefault();
    setIsDragging(true);
    setDragStart({
      x: e.clientX - position.x,
      y: e.clientY - position.y
    });
  };

  const handleTouchStart = (e) => {
    if (isOpen) return; // Don't drag when chat is open
    e.preventDefault();
    setIsDragging(true);
    const touch = e.touches[0];
    setDragStart({
      x: touch.clientX - position.x,
      y: touch.clientY - position.y
    });
  };

  const handleMouseMove = (e) => {
    if (!isDragging) return;
    e.preventDefault();
    
    const newX = e.clientX - dragStart.x;
    const newY = e.clientY - dragStart.y;
    
    // Keep within viewport bounds
    const maxX = window.innerWidth - 60; // 60px is button width
    const maxY = window.innerHeight - 60; // 60px is button height
    
    setPosition({
      x: Math.max(0, Math.min(newX, maxX)),
      y: Math.max(0, Math.min(newY, maxY))
    });
  };

  const handleTouchMove = (e) => {
    if (!isDragging) return;
    e.preventDefault();
    
    const touch = e.touches[0];
    const newX = touch.clientX - dragStart.x;
    const newY = touch.clientY - dragStart.y;
    
    // Keep within viewport bounds
    const maxX = window.innerWidth - 60;
    const maxY = window.innerHeight - 60;
    
    setPosition({
      x: Math.max(0, Math.min(newX, maxX)),
      y: Math.max(0, Math.min(newY, maxY))
    });
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  const handleTouchEnd = () => {
    setIsDragging(false);
  };

  // Add global event listeners for drag
  useEffect(() => {
    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      document.addEventListener('touchmove', handleTouchMove, { passive: false });
      document.addEventListener('touchend', handleTouchEnd);
      
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
        document.removeEventListener('touchmove', handleTouchMove);
        document.removeEventListener('touchend', handleTouchEnd);
      };
    }
  }, [isDragging, dragStart, position]);

  return (
    <div 
      className="chatbot-container"
      ref={chatbotRef}
      style={{
        left: `${position.x}px`,
        bottom: `${position.y}px`,
        cursor: isDragging ? 'grabbing' : (isOpen ? 'default' : 'grab')
      }}
    >
      {/* Chat Button */}
      <button 
        className={`chat-button ${isOpen ? 'active' : ''} ${isDragging ? 'dragging' : ''}`}
        onClick={!isDragging ? toggleChat : undefined}
        onMouseDown={handleMouseDown}
        onTouchStart={handleTouchStart}
        aria-label="Open chat support"
      >
        {isOpen ? (
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        ) : (
          <div className="lottie-container">
            <DotLottieReact
              src="https://lottie.host/f6c729ee-4c9e-4f76-bab7-633fca97a23a/1T0g0ujhdF.lottie"
              loop
              autoplay
              className="chat-lottie"
            />
          </div>
        )}
        {!isOpen && <div className="chat-notification-dot"></div>}
      </button>

      {/* Chat Window */}
      {isOpen && (
        <div className="chat-window">
          {/* Header */}
          <div className="chat-header">
            <div className="chat-header-info">
              <div className="bot-avatar">ü§ñ</div>
              <div>
                <h4>Tr·ª£ l√Ω Y t·∫ø FPT</h4>
                <span className="status-online">ƒêang ho·∫°t ƒë·ªông</span>
              </div>
            </div>
            <button className="close-chat" onClick={toggleChat}>
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
          </div>

          {/* Messages */}
          <div className="chat-messages">
            {messages.map((message) => (
              <div key={message.id} className={`message ${message.sender}`}>
                <div className="message-content">
                  <div className="message-text">{message.text}</div>
                  <div className="message-time">
                    {message.timestamp.toLocaleTimeString('vi-VN', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </div>
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Responses */}
          <div className="quick-responses">
            {quickResponses.map((response, index) => (
              <button
                key={index}
                className="quick-response-btn"
                onClick={() => handleQuickResponse(response)}
              >
                {response}
              </button>
            ))}
          </div>

          {/* Input */}
          <div className="chat-input-container">
            <div className="chat-input-wrapper">
              <textarea
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                className="chat-input"
                rows="1"
              />
              <button 
                className="send-button"
                onClick={() => handleSendMessage()}
                disabled={!inputMessage.trim()}
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <line x1="22" y1="2" x2="11" y2="13"></line>
                  <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
                </svg>
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Chatbot;
